#!/usr/bin/env python3

import click
from sys import argv
from pathlib import Path
import os
import shutil
import json

# Get the server path
server = Path(os.path.dirname(argv[0]))
os.chdir(server)
configs = server / 'configs'

class ConfigOption:
    def __init__(self, name: str, datatype: type, default = None, 
            desc: str = None):
        self.name = name
        self.datatype = datatype
        self.default = default
        self.desc = desc
    
    # Return a click option decorator to be added to the modify command
    def option_for_modify(self):
        option_name = '--' + self.name.replace('_', '-')
        return click.option(option_name, type=self.datatype, help=self.desc)

    def get_from_json(self, json: dict, none_default: bool = False):
        val = json.get(self.name)
        default = None if none_default else self.default
        return val if type(val) is self.datatype else default

config_options = dict([(i.name, i) for i in [
    ConfigOption('config_name', str, '.default', 
        'The name of the config to which this file belongs'),
    ConfigOption('server_version', str, 'latest', 
        'The version of Minecraft to launch'),
    ConfigOption('args', list, [],
        'The command-line arguments to pass to the server executable'),
    ConfigOption('launch_gui', bool, False,
        'Launch the server with the GUI panel'),
    ConfigOption('volatile_world', bool, False,
        'Generate a new world each time the server is started')
]])

def default_options(config_name: str):
    v = dict((k, v.default) for k, v in config_options.items())
    v['config_name'] = config_name
    return v

class ScriptError(Exception):
    pass

@click.command()
@click.argument('config')
def create(config):

    # Returns true if a new file was made
    def safe_make_folder(path: Path):

        # Make the folder if the path does not exist
        if not path.exists():
            path.mkdir()
            return True

        # Don't overwrite a potential file
        if path.is_file():
            raise ScriptError(f'Cannot create folder "{path}", as a file ' + \
                'already exists with a conflicting name.')

        # Do nothing if the folder exists
        return False

    safe_make_folder(configs)

    def populate_configuration(name):
        config_p = configs / name

        # Add default world 
        safe_make_folder(config_p / 'world-template')

        # Add config settings
        with open(config_p / 'configuration.json', 'x') as j:
            json.dump(default_options(name), j, indent=4)

    default_folder = configs / '.default'
    if safe_make_folder(default_folder):
        print(f'Creating a default configuration at {default_folder}.')
        populate_configuration('.default')
  
    if safe_make_folder(configs / config):
        print(f'Creating new configuration named "{config}".')
        populate_configuration(config)
    else:
        raise ScriptError(f'Configuration {config} already exists.')

@click.command()
@click.argument('config')
def deploy(config):

    print(f'Deploying configuration "{config}".')
    config_p = configs / config
    if not config_p.is_dir():
        raise ScriptError(f'Could not locate config option {config}.')

    # Get the previously deployed configuration
    try:
        with (server / 'deployed_files.json').open('r') as j:
            deployed_files = json.load(j)
    except FileNotFoundError:
        deployed_files = {}

    # Write the files to the old config
    old_config = deployed_files.get('configuration')
    if old_config is not None and (configs / old_config).is_dir():

        # Move each deployed file back into the old config
        try:
            for file in deployed_files.get('files', []):
                shutil.move(str(server / file), str(config_p / file))
        except FileNotFoundError:
            # Swallow FileNotFoundErrors
            pass
    
    deployed_files = []
    # Get all the files in the configuration
    _, files, folders = next(iter(os.walk(config_p)))
    for file in files + folders:

        # Ignore hidden files
        if file.startswith('.'):
            continue

        # Keep a record of the deployed files
        deployed_files.append(file)

        # Delete file/folder to be overwritten
        if (server / file).is_file():
            os.remove(server / file)
        elif (server / file).is_dir():
            shutil.rmtree(server / file)
            
        # Copy in new file
        if (config_p / file).is_file():
            shutil.copy(config_p / file, server / file)
        elif (config_p / file).is_dir():
            shutil.copytree(config_p / file, server / file)

    # Dump the deployed files into a JSON file
    with (server / 'deployed_files.json').open('w+') as f:
        json.dump({
                "configuration": config, 
                "files": deployed_files
            }, f, indent=4)

@click.command()
@click.option('--skip-checksum', '-s', 
    is_flag=True, help='Skips checking the integrity of the download.')
@click.argument('version')
def download(skip_checksum, version: str):

    from urllib.request import urlopen, urlretrieve
    from urllib.error import URLError
    man_url = 'https://launchermeta.mojang.com/mc/game/version_manifest.json'

    print('Fetching Minecraft version manifest.')
    try:
        with urlopen(man_url) as url:
            manifest = json.load(url)
    except URLError as e:
        raise ScriptError(str(e))

    # Get latest version of Minecraft
    if version in ('latest', 'latest-release'):
        version = manifest["latest"]["release"]
        print(f'Latest release of Minecraft is {version}.')
    elif version == 'latest-snapshot':
        version = manifest["latest"]["snapshot"]
        print(f'Latest snapshot of Minecraft is {version}')

    # Check if version is already installed
    if (server / (version + '.jar')).exists():
        raise ScriptError(f'Minecraft version {version} already installed.')

    # Fetch version manifest
    v_list = manifest['versions']
    v_data = {}
    for v in v_list:
        if version == v['id']:
            v_data = v
            break
    else:
        raise ScriptError(f'No official version {version} exists.')

    print(f'Fetching manifest for version {version}.')
    try:
        with urlopen(v_data['url']) as url:
            v_manifest = json.load(url)['downloads']
    except URLError as e:
        raise ScriptError(str(e))
    
    # Check if the version has a server
    v_manifest = v_manifest.get('server')
    if v_manifest is None:
        raise ScriptError(f'Version {version} does not have a server file.')

    url = v_manifest['url']
    size = round(v_manifest['size'] / (1024 ** 2), 1)

    print(f'Downloading {version}.jar (size {size}MB).')
    try:
        urlretrieve(url, server / (version + '.jar'))
    except URLError as e:
        raise ScriptError(str(e))

    if not skip_checksum:
        print('Verifying download', end='...')

        # Compute hash
        from hashlib import sha1
        hash = sha1()
        with (server / (version + '.jar')).open('rb') as f:
            while True:
                data = f.read(64 * 1024)
                if not data:
                    break
                hash.update(data)

        # Compare hashes
        expected = v_manifest['sha1']
        hash = hash.hexdigest()
        if hash == expected:
            print('Hashes match.')
        else:
            print(f'Hashes do not match (expected {expected}, got {hash}.')
    
    print(f'Successfully installed {version}.jar.')

@click.command()
@click.argument('config')
def modify(config, config_name, **options):

    # Get the config folder
    config_p = configs / config
    if not config_p.is_dir():
        raise ScriptError(f'No configuration {config} exists.')

    # Get config file
    try:
        with (config_p / 'configuration.json').open('r') as j:
            config_file = json.load(j)
    except FileNotFoundError:
        config_file = {}
    except json.decoder.JSONDecodeError as e:
        raise ScriptError('Malformed JSON in configuration.json: ' + str(e))

    # Rename the configuration
    if config_name is not None and not (configs / config_name).exists():
        os.rename(config_p, configs / config_name)
        print(f'Renamed configuration {config} to "{config_name}".')
        config = config_name
        config_p = configs / config_name
    else:
        print(
            f'Could not rename configuration: "{config_name} already exists.')

    # Make the modifications
    for option, v in options.items():
        if v is not None:
            config_file[option] = v
    
    with (config_p / 'configuration.json').open('w+') as j:
        json.dump(config_file, j, indent=4)

# Decorate modify based on the config options
for option in config_options.values():
    modify = option.option_for_modify()(modify)

@click.command()
@click.option('--crash-message', '-c', help='Sets the server status '
    'to a crash message upon close until the user provides a '
    'message.')
@click.option('--ignore-status', '-i', is_flag=True,
    help='Do not edit the server status file.')
@click.argument('config', required=False)
def start(config, crash_message, ignore_status):

    # Deploy the config option
    if config is not None:
        deploy(config)

    def read_json(path: Path) -> dict:
        try:
            with path.open('r') as p:
                j = json.load(p)
            return j
        except IOError as e:
            raise ScriptError(str(e))

    # Get the server IP
    private = read_json(server / 'private.json')
    ip = private.get('ip', None)
    if ip is None:
        raise ScriptError('IP not found. Add it to private.json.')

    # Get the start settings
    start = read_json(server / 'configuration.json')
    #TODO: only load these in when necessary
    if (configs / '.default' / 'configuration.json').is_file():
        with (configs / '.default' / 'configuration.json').open('r') as p:
            try:
                default_settings = json.load(p)
            except FileNotFoundError:
                default_settings = {}
    else:
        default_settings = {}

    # Declare a helper function for referencing the start settings
    def get_option(option: str, default = None):

        # First try the deployed config file
        deployed = config_options[option].get_from_json(start, True)
        if deployed is not None:
            return deployed
            
        # Then try the config file in .default
        print(f'Deployed configuration.json has no option {option}. ' + \
            f'Falling back to option in {str(configs / ".default")}.')
        return config_options[option].get_from_json(default_settings)

    # Read in the start settings
    version = get_option('server_version')
    if version is None:
        raise ScriptError(
            'No server version specified in configuration.json.')
    args = ''.join([' ' + a for a in get_option('args', [])])
    gui = get_option('launch_gui', False)
    volatile_world = get_option('volatile_world', False)

    # Recreate the world if necessary
    if (server / 'server.properties').exists():

        # Get world name
        with (server / 'server.properties').open('r') as f:
            while True:
                prefix = 'level-name='
                world_name_line = f.readline()
                if world_name_line.startswith(prefix):
                    break
        world_name = world_name_line[len(prefix):-1]

        # Cut the trailing newline
        if world_name.endswith('\n'):
            world_name = world_name[:-1]

        # Default to "world"
        if world_name == '':
            world_name = 'world'

        # Delete the old folder
        if volatile_world:
            if (server / world_name).exists():
                print(f'About to delete folder {server / world_name}. ' + \
                    'Press enter to confirm.')
                input()
                shutil.rmtree(server / world_name, Path.home())

        # Copy in the template if the world must be recreated
        if not (server / world_name).exists():
            name = get_option('config_name')
            if name and (configs / name / 'world-template').is_dir():
                shutil.copytree(configs / name / 'world-template', 
                    server / world_name)
                print(f'World template from configuration {name} used.')
            else:
                print('Could not locate a world template.')

    # Splice the command
    command = 'java' + args + ' -jar ' + version + '.jar' + \
        ' nogui' if not gui else ''

    # Quick helper function for updating the SERVER_STATUS file
    def update_status(message: str):
        if ignore_status: return
        with (server / 'SERVER_STATUS').open('w') as s:
            s.write(message)

    # Start the server
    print('Starting server with command `' + command + '`.')
    update_status(f"STATUS: Online\nVersion: {version}\nIP: {ip}")
    code = os.system(command)
    print(f'Server closed with exit code {code}.')

    # Request closing status
    if crash_message:
        update_status('STATUS: ' + crash_message)
        print('Enter the closure status.')
        print(f'(Status will read "{crash_message}" until this is done).')
        update_status('STATUS: ' + input('>>> '))
    else:
        update_status('STATUS: Offline')

@click.group()
def main():
    pass

main.add_command(create)
main.add_command(deploy)
main.add_command(download)
main.add_command(modify)
main.add_command(start)

if __name__ == '__main__':
    try:
        main()
    except ScriptError as e:
        print('Error: ' + str(e))
