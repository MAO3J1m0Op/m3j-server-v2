#!/usr/bin/env python3

import click
from sys import argv
from pathlib import Path
import os
import shutil
import json

# Get the server path
server = Path(os.path.dirname(argv[0]))
os.chdir(server)
configs = server / 'configs'

default_start_file = {
    "config_name": ".default",
    "server_version": "1.7.10",
    "args": [
        "-Xmx1024M",
        "-Xms1024M"
    ],
    "launch_gui": False,
    "volatile_world": False
}

class ScriptError(Exception):
    pass

@click.command()
@click.argument('config')
def create(config):

    # Returns true if a new file was made
    def safe_make_folder(path: Path):

        # Make the folder if the path does not exist
        if not path.exists():
            path.mkdir()
            return True

        # Don't overwrite a potential file
        if path.is_file():
            raise ScriptError(f'Cannot create folder "{path}", as a file ' + \
                'already exists with a conflicting name.')

        # Do nothing if the folder exists
        return False

    safe_make_folder(configs)

    # Create the default if it doesn't exist
    default = configs / '.default'
    if safe_make_folder(default):
        print(f'Creating a default configuration at {default}. All ' + \
            'new configurations will be a copy of this one.')

        # Verify the server.properties file exists    
        if (server / 'server.properties').is_file():
            shutil.copyfile(server / 'server.properties', 
                default / 'server.properties')
        else:
            print('No server.properties file found. The default ' + \
                'configuration will lack this file.')

        # Add default world 
        safe_make_folder(default / 'world-template')

        # Add config settings
        with open(default / 'start.json', 'x') as j:
            json.dump(default_start_file, j)

    # Create the new config: a copy of the default
    config_p = configs / config
    if config_p.exists():
        raise ScriptError(f'Configuration {config} already exists.')
    print(f'Creating new configuration named "{config}".')
    shutil.copytree(default, config_p)

@click.command()
@click.argument('config')
def deploy(config):

    def deploy_file(config_p: Path, file: str):
        try:
            shutil.copyfile(str(config_p / file), server / file)
        # TODO specify exception
        except FileNotFoundError as e:
            print(f'No {file} found. Using existing file.')

    print(f'Deploying configuration "{config}".')
    config_p = configs / config
    if not config_p.is_dir():
        raise ScriptError(f'Could not locate config option {config}.')
    
    deploy_file(config_p, 'server.properties')
    deploy_file(config_p, 'server-icon.png')
    deploy_file(config_p, 'start.json')

@click.command()
@click.option('--skip-checksum', '-s', 
    is_flag=True, help='Skips checking the integrity of the download.')
@click.argument('version')
def download(skip_checksum, version: str):

    from urllib.request import urlopen, urlretrieve
    man_url = 'https://launchermeta.mojang.com/mc/game/version_manifest.json'

    print('Fetching Minecraft version manifest.')
    with urlopen(man_url) as url:
        manifest = json.load(url)

    # Get latest version of Minecraft
    if version in ('latest', 'latest-release'):
        version = manifest["latest"]["release"]
        print(f'Latest release of Minecraft is {version}.')
    elif version == 'latest-snapshot':
        version = manifest["latest"]["snapshot"]
        print(f'Latest snapshot of Minecraft is {version}')

    # Check if version is already installed
    if (server / (version + '.jar')).exists():
        raise ScriptError(f'Minecraft version {version} already installed.')

    # Fetch version manifest
    v_list = manifest['versions']
    v_data = {}
    for v in v_list:
        if version == v['id']:
            v_data = v
            break
    else:
        raise ScriptError(f'No official version {version} exists.')

    print(f'Fetching manifest for version {version}.')
    with urlopen(v_data['url']) as url:
        v_manifest = json.load(url)['downloads']
    
    # Check if the version has a server
    v_manifest = v_manifest.get('server')
    if v_manifest is None:
        raise ScriptError(f'Version {version} does not have a server file.')

    url = v_manifest['url']
    size = round(v_manifest['size'] / (1024 ** 2), 1)

    print(f'Downloading {version}.jar (size {size}MB).')
    urlretrieve(url, server / (version + '.jar'))

    if not skip_checksum:
        print('Verifying download', end='...')

        # Compute hash
        from hashlib import sha1
        hash = sha1()
        with (server / (version + '.jar')).open('rb') as f:
            while True:
                data = f.read(64 * 1024)
                if not data:
                    break
                hash.update(data)

        # Compare hashes
        expected = v_manifest['sha1']
        hash = hash.hexdigest()
        if hash == expected:
            print('Hashes match.')
        else:
            print(f'Hashes do not match (expected {expected}, got {hash}.')
    
    print(f'Successfully installed {version}.jar.')

@click.command()
@click.argument('config', required=False)
def start(config):

    # Deploy the config option
    if config is not None:
        deploy(config)

    def read_json(path: Path) -> dict:
        try:
            with path.open('r') as p:
                j = json.load(p)
            return j
        except IOError as e:
            raise ScriptError(str(e))

    # Get the server IP
    private = read_json(server / 'private.json')
    ip = private.get('ip', None)
    if ip is None:
        raise ScriptError('IP not found. Add it to private.json.')

    # Get the start settings
    start = read_json(server / 'start.json')
    #TODO: only load these in when necessary
    default_settings = read_json(configs / '.default' / 'start.json')

    # Declare a helper function for referencing the start settings
    def get_option(option: str, default = None):

        # First try the deployed start file
        deployed = start.get(option)
        if deployed is not None:
            return deployed
            
        # Then try the start file in .default
        print(f'Deployed start.json has no option {option}. Falling back ' + \
            f'to option in {str(configs / ".default")}.')
        return default_settings.get(option, default)

    # Read in the start settings
    version = get_option('server_version')
    if version is None:
        raise ScriptError('No server version specified in start.json.')
    args = ''.join([' ' + a for a in get_option('args', [])])
    gui = get_option('launch_gui', False)
    volatile_world = get_option('volatile_world', False)

    # Recreate the world if necessary
    if (server / 'server.properties').exists():

        # Get world name
        with (server / 'server.properties').open('r') as f:
            while True:
                prefix = 'level-name='
                world_name_line = f.readline()
                if world_name_line.startswith(prefix):
                    break
        world_name = world_name_line[len(prefix):-1]

        # Cut the trailing newline
        if world_name.endswith('\n'):
            world_name = world_name[:-1]

        # Default to "world"
        if world_name == '':
            world_name = 'world'

        # Delete the old folder
        if volatile_world:
            if (server / world_name).exists():
                print(f'About to delete folder {server / world_name}. ' + \
                    'Press enter to confirm.')
                input()
                shutil.rmtree(server / world_name, Path.home())

        # Copy in the template if the world must be recreated
        if not (server / world_name).exists():
            name = get_option('config_name')
            if name and (configs / name / 'world-template').is_dir():
                shutil.copytree(configs / name / 'world-template', 
                    server / world_name)
                print(f'World template from configuration {name} used.')
            else:
                print('Could not locate a world template.')

    # Splice the command
    command = 'java' + args + ' -jar ' + version + '.jar' + \
        ' nogui' if not gui else ''

    # Quick helper function for updating the SERVER_STATUS file
    def update_status(message: str):
        with (server / 'SERVER_STATUS').open('w') as s:
            s.write(message)

    # Start the server
    print('Starting server with command `' + command + '`.')
    update_status("STATUS: ONLINE\nIP: " + ip)
    code = os.system(command)
    print(f"Process ended with exit code {code}.")

    # Request closing status
    update_status('STATUS: Unexpectedly Closed')
    print('Server closed. Enter the closure status.')
    print('(Status will read "Unexpectedly Closed" until this is done).')
    update_status('STATUS: ' + input('>>> '))

@click.group()
def main():
    pass

main.add_command(create)
main.add_command(deploy)
main.add_command(download)
main.add_command(start)

if __name__ == '__main__':
    try:
        main()
    except ScriptError as e:
        print('Error: ' + str(e))
